{"ast":null,"code":"import { LeaderboardTwoTone } from '@mui/icons-material';\nimport { createSlice } from '@reduxjs/toolkit';\nconst addTaskSlice = createSlice({\n  name: 'addTask',\n  initialState: {\n    showModal: false,\n    priorityLevel: 0,\n    titleFieldValue: '',\n    descriptionFieldValue: '',\n    allTasks: [],\n    incompleteTasks: [],\n    activeTasks: [],\n    finishedTasks: []\n  },\n  reducers: {\n    setShowModal: (state, action) => {\n      state.showModal = action.payload;\n    },\n    setPriorityLevel: (state, action) => {\n      state.priorityLevel = action.payload;\n    },\n    setTitleFieldValue: (state, action) => {\n      state.titleFieldValue = action.payload;\n    },\n    setDescriptionFieldValue: (state, action) => {\n      state.descriptionFieldValue = action.payload;\n    },\n    setNewTask: (state, action) => {\n      state.incompleteTasks.push(action.payload);\n      state.allTasks.push(action.payload);\n    },\n    moveTask: (state, action) => {\n      let movedItem;\n      switch (action.payload.source.droppableId) {\n        case 'incomplete':\n          movedItem = state.incompleteTasks[action.payload.source.index];\n          state.incompleteTasks = state.incompleteTasks.filter((_, index) => index !== action.payload.source.index);\n          break;\n        case 'active':\n          movedItem = state.activeTasks[action.payload.source.index];\n          state.activeTasks = state.activeTasks.filter((_, index) => index !== action.payload.source.index);\n          break;\n        case 'finished':\n          movedItem = state.finishedTasks[action.payload.source.index];\n          state.finishedTasks = state.finishedTasks.filter((_, index) => index !== action.payload.source.index);\n          break;\n      }\n      switch (action.payload.destination.droppableId) {\n        case 'incomplete':\n          state.incompleteTasks.splice(action.payload.destination.index, 0, movedItem);\n          break;\n        case 'active':\n          state.activeTasks.splice(action.payload.destination.index, 0, movedItem);\n          break;\n        case 'finished':\n          state.finishedTasks.splice(action.payload.destination.index, 0, movedItem);\n          break;\n      }\n    },\n    reorderTasks: (state, action) => {\n      let movedItem;\n      switch (action.payload.source.droppableId) {\n        case 'incomplete':\n          movedItem = state.incompleteTasks[action.payload.source.index];\n          state.incompleteTasks.splice(action.payload.source.index, 1);\n          state.incompleteTasks.splice(action.payload.destination.index, 0, movedItem);\n          break;\n        case 'active':\n          movedItem = state.activeTasks[action.payload.source.index];\n          state.activeTasks.splice(action.payload.source.index, 1);\n          state.activeTasks.splice(action.payload.destination.index, 0, movedItem);\n          break;\n        case 'finished':\n          movedItem = state.finishedTasks[action.payload.source.index];\n          state.finishedTasks.splice(action.payload.source.index, 1);\n          state.finishedTasks.splice(action.payload.destination.index, 0, movedItem);\n          break;\n      }\n    },\n    deleteTask: (state, action) => {\n      console.log(action.payload.list);\n      console.log(state.incompleteTasks);\n      switch (action.payload.list) {\n        case state.incompleteTasks:\n          console.log('ME ME');\n        case state.activeTasks:\n        case state.finishedTasks:\n      }\n    }\n  }\n});\nexport const {\n  setShowModal,\n  setPriorityLevel,\n  setTitleFieldValue,\n  setDescriptionFieldValue,\n  setNewTask,\n  moveTask,\n  reorderTasks,\n  deleteTask\n} = addTaskSlice.actions;\nexport default addTaskSlice.reducer;","map":{"version":3,"names":["LeaderboardTwoTone","createSlice","addTaskSlice","name","initialState","showModal","priorityLevel","titleFieldValue","descriptionFieldValue","allTasks","incompleteTasks","activeTasks","finishedTasks","reducers","setShowModal","state","action","payload","setPriorityLevel","setTitleFieldValue","setDescriptionFieldValue","setNewTask","push","moveTask","movedItem","source","droppableId","index","filter","_","destination","splice","reorderTasks","deleteTask","console","log","list","actions","reducer"],"sources":["C:/Users/braed/Documents/Personal/Planner/src/Reducers/DayReducer.js"],"sourcesContent":["import { LeaderboardTwoTone } from '@mui/icons-material';\r\nimport { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst addTaskSlice = createSlice({\r\n  name: 'addTask',\r\n  initialState: {\r\n    showModal: false,\r\n    priorityLevel: 0,\r\n    titleFieldValue: '',\r\n    descriptionFieldValue: '',\r\n    allTasks: [],\r\n    incompleteTasks: [],\r\n    activeTasks: [],\r\n    finishedTasks: []\r\n  },\r\n  reducers: {\r\n    setShowModal: (state, action) => {\r\n      state.showModal = action.payload;\r\n    },\r\n    setPriorityLevel: (state, action) => {\r\n      state.priorityLevel = action.payload;\r\n    },\r\n    setTitleFieldValue: (state, action) => {\r\n      state.titleFieldValue = action.payload;\r\n    },\r\n    setDescriptionFieldValue: (state, action) => {\r\n      state.descriptionFieldValue = action.payload;\r\n    },\r\n    setNewTask: (state, action) => {\r\n      state.incompleteTasks.push(action.payload);\r\n      state.allTasks.push(action.payload);\r\n    },\r\n    moveTask: (state, action) => {\r\n      let movedItem;\r\n\r\n      switch (action.payload.source.droppableId) {\r\n        case 'incomplete':\r\n          movedItem = state.incompleteTasks[action.payload.source.index];\r\n          state.incompleteTasks = state.incompleteTasks.filter((_, index) => index !== action.payload.source.index);\r\n          break;\r\n        case 'active':\r\n          movedItem = state.activeTasks[action.payload.source.index];\r\n          state.activeTasks = state.activeTasks.filter((_, index) => index !== action.payload.source.index);\r\n          break;\r\n        case 'finished':\r\n          movedItem = state.finishedTasks[action.payload.source.index];\r\n          state.finishedTasks = state.finishedTasks.filter((_, index) => index !== action.payload.source.index);\r\n          break;\r\n      }\r\n\r\n      switch (action.payload.destination.droppableId) {\r\n        case 'incomplete':\r\n          state.incompleteTasks.splice(action.payload.destination.index, 0, movedItem)\r\n          break;\r\n        case 'active':\r\n          state.activeTasks.splice(action.payload.destination.index, 0, movedItem)\r\n          break;\r\n        case 'finished':\r\n          state.finishedTasks.splice(action.payload.destination.index, 0, movedItem)\r\n          break;\r\n      }\r\n    },\r\n    reorderTasks: (state, action) => {\r\n      let movedItem;\r\n      switch (action.payload.source.droppableId) {\r\n        case 'incomplete':\r\n          movedItem = state.incompleteTasks[action.payload.source.index]\r\n          state.incompleteTasks.splice(action.payload.source.index, 1)\r\n          state.incompleteTasks.splice(action.payload.destination.index, 0, movedItem)\r\n          break;\r\n        case 'active':\r\n          movedItem = state.activeTasks[action.payload.source.index]\r\n          state.activeTasks.splice(action.payload.source.index, 1)\r\n          state.activeTasks.splice(action.payload.destination.index, 0, movedItem)\r\n          break;\r\n        case 'finished':\r\n          movedItem = state.finishedTasks[action.payload.source.index]\r\n          state.finishedTasks.splice(action.payload.source.index, 1)\r\n          state.finishedTasks.splice(action.payload.destination.index, 0, movedItem)\r\n          break;\r\n      }\r\n    },\r\n    deleteTask: (state, action) => {\r\n      console.log(action.payload.list)\r\n      console.log(state.incompleteTasks)\r\n      switch (action.payload.list) {\r\n        case (state.incompleteTasks):\r\n          console.log('ME ME')\r\n        case (state.activeTasks):\r\n\r\n        case (state.finishedTasks):\r\n\r\n      }\r\n    }\r\n  },\r\n});\r\n\r\nexport const {\r\n  setShowModal,\r\n  setPriorityLevel,\r\n  setTitleFieldValue,\r\n  setDescriptionFieldValue,\r\n  setNewTask,\r\n  moveTask,\r\n  reorderTasks,\r\n  deleteTask\r\n} = addTaskSlice.actions;\r\n\r\nexport default addTaskSlice.reducer;"],"mappings":"AAAA,SAASA,kBAAkB,QAAQ,qBAAqB;AACxD,SAASC,WAAW,QAAQ,kBAAkB;AAE9C,MAAMC,YAAY,GAAGD,WAAW,CAAC;EAC/BE,IAAI,EAAE,SAAS;EACfC,YAAY,EAAE;IACZC,SAAS,EAAE,KAAK;IAChBC,aAAa,EAAE,CAAC;IAChBC,eAAe,EAAE,EAAE;IACnBC,qBAAqB,EAAE,EAAE;IACzBC,QAAQ,EAAE,EAAE;IACZC,eAAe,EAAE,EAAE;IACnBC,WAAW,EAAE,EAAE;IACfC,aAAa,EAAE;EACjB,CAAC;EACDC,QAAQ,EAAE;IACRC,YAAY,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC/BD,KAAK,CAACV,SAAS,GAAGW,MAAM,CAACC,OAAO;IAClC,CAAC;IACDC,gBAAgB,EAAEA,CAACH,KAAK,EAAEC,MAAM,KAAK;MACnCD,KAAK,CAACT,aAAa,GAAGU,MAAM,CAACC,OAAO;IACtC,CAAC;IACDE,kBAAkB,EAAEA,CAACJ,KAAK,EAAEC,MAAM,KAAK;MACrCD,KAAK,CAACR,eAAe,GAAGS,MAAM,CAACC,OAAO;IACxC,CAAC;IACDG,wBAAwB,EAAEA,CAACL,KAAK,EAAEC,MAAM,KAAK;MAC3CD,KAAK,CAACP,qBAAqB,GAAGQ,MAAM,CAACC,OAAO;IAC9C,CAAC;IACDI,UAAU,EAAEA,CAACN,KAAK,EAAEC,MAAM,KAAK;MAC7BD,KAAK,CAACL,eAAe,CAACY,IAAI,CAACN,MAAM,CAACC,OAAO,CAAC;MAC1CF,KAAK,CAACN,QAAQ,CAACa,IAAI,CAACN,MAAM,CAACC,OAAO,CAAC;IACrC,CAAC;IACDM,QAAQ,EAAEA,CAACR,KAAK,EAAEC,MAAM,KAAK;MAC3B,IAAIQ,SAAS;MAEb,QAAQR,MAAM,CAACC,OAAO,CAACQ,MAAM,CAACC,WAAW;QACvC,KAAK,YAAY;UACfF,SAAS,GAAGT,KAAK,CAACL,eAAe,CAACM,MAAM,CAACC,OAAO,CAACQ,MAAM,CAACE,KAAK,CAAC;UAC9DZ,KAAK,CAACL,eAAe,GAAGK,KAAK,CAACL,eAAe,CAACkB,MAAM,CAAC,CAACC,CAAC,EAAEF,KAAK,KAAKA,KAAK,KAAKX,MAAM,CAACC,OAAO,CAACQ,MAAM,CAACE,KAAK,CAAC;UACzG;QACF,KAAK,QAAQ;UACXH,SAAS,GAAGT,KAAK,CAACJ,WAAW,CAACK,MAAM,CAACC,OAAO,CAACQ,MAAM,CAACE,KAAK,CAAC;UAC1DZ,KAAK,CAACJ,WAAW,GAAGI,KAAK,CAACJ,WAAW,CAACiB,MAAM,CAAC,CAACC,CAAC,EAAEF,KAAK,KAAKA,KAAK,KAAKX,MAAM,CAACC,OAAO,CAACQ,MAAM,CAACE,KAAK,CAAC;UACjG;QACF,KAAK,UAAU;UACbH,SAAS,GAAGT,KAAK,CAACH,aAAa,CAACI,MAAM,CAACC,OAAO,CAACQ,MAAM,CAACE,KAAK,CAAC;UAC5DZ,KAAK,CAACH,aAAa,GAAGG,KAAK,CAACH,aAAa,CAACgB,MAAM,CAAC,CAACC,CAAC,EAAEF,KAAK,KAAKA,KAAK,KAAKX,MAAM,CAACC,OAAO,CAACQ,MAAM,CAACE,KAAK,CAAC;UACrG;MACJ;MAEA,QAAQX,MAAM,CAACC,OAAO,CAACa,WAAW,CAACJ,WAAW;QAC5C,KAAK,YAAY;UACfX,KAAK,CAACL,eAAe,CAACqB,MAAM,CAACf,MAAM,CAACC,OAAO,CAACa,WAAW,CAACH,KAAK,EAAE,CAAC,EAAEH,SAAS,CAAC;UAC5E;QACF,KAAK,QAAQ;UACXT,KAAK,CAACJ,WAAW,CAACoB,MAAM,CAACf,MAAM,CAACC,OAAO,CAACa,WAAW,CAACH,KAAK,EAAE,CAAC,EAAEH,SAAS,CAAC;UACxE;QACF,KAAK,UAAU;UACbT,KAAK,CAACH,aAAa,CAACmB,MAAM,CAACf,MAAM,CAACC,OAAO,CAACa,WAAW,CAACH,KAAK,EAAE,CAAC,EAAEH,SAAS,CAAC;UAC1E;MACJ;IACF,CAAC;IACDQ,YAAY,EAAEA,CAACjB,KAAK,EAAEC,MAAM,KAAK;MAC/B,IAAIQ,SAAS;MACb,QAAQR,MAAM,CAACC,OAAO,CAACQ,MAAM,CAACC,WAAW;QACvC,KAAK,YAAY;UACfF,SAAS,GAAGT,KAAK,CAACL,eAAe,CAACM,MAAM,CAACC,OAAO,CAACQ,MAAM,CAACE,KAAK,CAAC;UAC9DZ,KAAK,CAACL,eAAe,CAACqB,MAAM,CAACf,MAAM,CAACC,OAAO,CAACQ,MAAM,CAACE,KAAK,EAAE,CAAC,CAAC;UAC5DZ,KAAK,CAACL,eAAe,CAACqB,MAAM,CAACf,MAAM,CAACC,OAAO,CAACa,WAAW,CAACH,KAAK,EAAE,CAAC,EAAEH,SAAS,CAAC;UAC5E;QACF,KAAK,QAAQ;UACXA,SAAS,GAAGT,KAAK,CAACJ,WAAW,CAACK,MAAM,CAACC,OAAO,CAACQ,MAAM,CAACE,KAAK,CAAC;UAC1DZ,KAAK,CAACJ,WAAW,CAACoB,MAAM,CAACf,MAAM,CAACC,OAAO,CAACQ,MAAM,CAACE,KAAK,EAAE,CAAC,CAAC;UACxDZ,KAAK,CAACJ,WAAW,CAACoB,MAAM,CAACf,MAAM,CAACC,OAAO,CAACa,WAAW,CAACH,KAAK,EAAE,CAAC,EAAEH,SAAS,CAAC;UACxE;QACF,KAAK,UAAU;UACbA,SAAS,GAAGT,KAAK,CAACH,aAAa,CAACI,MAAM,CAACC,OAAO,CAACQ,MAAM,CAACE,KAAK,CAAC;UAC5DZ,KAAK,CAACH,aAAa,CAACmB,MAAM,CAACf,MAAM,CAACC,OAAO,CAACQ,MAAM,CAACE,KAAK,EAAE,CAAC,CAAC;UAC1DZ,KAAK,CAACH,aAAa,CAACmB,MAAM,CAACf,MAAM,CAACC,OAAO,CAACa,WAAW,CAACH,KAAK,EAAE,CAAC,EAAEH,SAAS,CAAC;UAC1E;MACJ;IACF,CAAC;IACDS,UAAU,EAAEA,CAAClB,KAAK,EAAEC,MAAM,KAAK;MAC7BkB,OAAO,CAACC,GAAG,CAACnB,MAAM,CAACC,OAAO,CAACmB,IAAI,CAAC;MAChCF,OAAO,CAACC,GAAG,CAACpB,KAAK,CAACL,eAAe,CAAC;MAClC,QAAQM,MAAM,CAACC,OAAO,CAACmB,IAAI;QACzB,KAAMrB,KAAK,CAACL,eAAe;UACzBwB,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC;QACtB,KAAMpB,KAAK,CAACJ,WAAW;QAEvB,KAAMI,KAAK,CAACH,aAAa;MAE3B;IACF;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EACXE,YAAY;EACZI,gBAAgB;EAChBC,kBAAkB;EAClBC,wBAAwB;EACxBC,UAAU;EACVE,QAAQ;EACRS,YAAY;EACZC;AACF,CAAC,GAAG/B,YAAY,CAACmC,OAAO;AAExB,eAAenC,YAAY,CAACoC,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}