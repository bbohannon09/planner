{"ast":null,"code":"import { LeaderboardTwoTone } from '@mui/icons-material';\nimport { createSlice } from '@reduxjs/toolkit';\nconst addTaskSlice = createSlice({\n  name: 'addTask',\n  initialState: {\n    showModal: false,\n    priorityLevel: 0,\n    titleFieldValue: '',\n    descriptionFieldValue: '',\n    allTasks: [],\n    incompleteTasks: [],\n    activeTasks: [],\n    finishedTasks: []\n  },\n  reducers: {\n    setShowModal: (state, action) => {\n      state.showModal = action.payload;\n    },\n    setPriorityLevel: (state, action) => {\n      state.priorityLevel = action.payload;\n    },\n    setTitleFieldValue: (state, action) => {\n      state.titleFieldValue = action.payload;\n    },\n    setDescriptionFieldValue: (state, action) => {\n      state.descriptionFieldValue = action.payload;\n    },\n    setNewTask: (state, action) => {\n      state.incompleteTasks.push(action.payload);\n      state.allTasks.push(action.payload);\n      localStorage.setItem(incompleteTasks, state.incompleteTasks);\n      localStorage.setItem(activeTasks, state.activeTasks);\n      localStorage.setItem(finishedTasks, state.finishedTasks);\n    },\n    moveTask: (state, action) => {\n      let movedItem;\n      switch (action.payload.source.droppableId) {\n        case 'incomplete':\n          movedItem = state.incompleteTasks[action.payload.source.index];\n          state.incompleteTasks = state.incompleteTasks.filter((_, index) => index !== action.payload.source.index);\n          break;\n        case 'active':\n          movedItem = state.activeTasks[action.payload.source.index];\n          state.activeTasks = state.activeTasks.filter((_, index) => index !== action.payload.source.index);\n          break;\n        case 'finished':\n          movedItem = state.finishedTasks[action.payload.source.index];\n          state.finishedTasks = state.finishedTasks.filter((_, index) => index !== action.payload.source.index);\n          break;\n      }\n      switch (action.payload.destination.droppableId) {\n        case 'incomplete':\n          state.incompleteTasks.splice(action.payload.destination.index, 0, movedItem);\n          break;\n        case 'active':\n          state.activeTasks.splice(action.payload.destination.index, 0, movedItem);\n          break;\n        case 'finished':\n          state.finishedTasks.splice(action.payload.destination.index, 0, movedItem);\n          break;\n      }\n      localStorage.setItem(incompleteTasks, state.incompleteTasks);\n      localStorage.setItem(activeTasks, state.activeTasks);\n      localStorage.setItem(finishedTasks, state.finishedTasks);\n    },\n    reorderTasks: (state, action) => {\n      let movedItem;\n      switch (action.payload.source.droppableId) {\n        case 'incomplete':\n          movedItem = state.incompleteTasks[action.payload.source.index];\n          state.incompleteTasks.splice(action.payload.source.index, 1);\n          state.incompleteTasks.splice(action.payload.destination.index, 0, movedItem);\n          break;\n        case 'active':\n          movedItem = state.activeTasks[action.payload.source.index];\n          state.activeTasks.splice(action.payload.source.index, 1);\n          state.activeTasks.splice(action.payload.destination.index, 0, movedItem);\n          break;\n        case 'finished':\n          movedItem = state.finishedTasks[action.payload.source.index];\n          state.finishedTasks.splice(action.payload.source.index, 1);\n          state.finishedTasks.splice(action.payload.destination.index, 0, movedItem);\n          break;\n      }\n      localStorage.setItem(incompleteTasks, state.incompleteTasks);\n      localStorage.setItem(activeTasks, state.activeTasks);\n      localStorage.setItem(finishedTasks, state.finishedTasks);\n    },\n    deleteTask: (state, action) => {\n      switch (action.payload.list) {\n        case 'incompleteTasks':\n          state.incompleteTasks.splice(action.payload.index, 1);\n          break;\n        case 'activeTasks':\n          state.activeTasks.splice(action.payload.index, 1);\n          break;\n        case 'finishedTasks':\n          state.finishedTasks.splice(action.payload.index, 1);\n          break;\n      }\n      localStorage.setItem(incompleteTasks, state.incompleteTasks);\n      localStorage.setItem(activeTasks, state.activeTasks);\n      localStorage.setItem(finishedTasks, state.finishedTasks);\n    },\n    pageLoad: (state, action) => {\n      state.incompleteTasks = action.payload.incompleteTasks;\n      state.activeTasks = action.payload.activeTasks;\n      state.finishedTasks = action.payload.finishedTasks;\n    }\n  }\n});\nexport const {\n  setShowModal,\n  setPriorityLevel,\n  setTitleFieldValue,\n  setDescriptionFieldValue,\n  setNewTask,\n  moveTask,\n  reorderTasks,\n  deleteTask,\n  pageLoad\n} = addTaskSlice.actions;\nexport default addTaskSlice.reducer;","map":{"version":3,"names":["LeaderboardTwoTone","createSlice","addTaskSlice","name","initialState","showModal","priorityLevel","titleFieldValue","descriptionFieldValue","allTasks","incompleteTasks","activeTasks","finishedTasks","reducers","setShowModal","state","action","payload","setPriorityLevel","setTitleFieldValue","setDescriptionFieldValue","setNewTask","push","localStorage","setItem","moveTask","movedItem","source","droppableId","index","filter","_","destination","splice","reorderTasks","deleteTask","list","pageLoad","actions","reducer"],"sources":["C:/Users/braed/Documents/Personal/Planner/src/Reducers/DayReducer.js"],"sourcesContent":["import { LeaderboardTwoTone } from '@mui/icons-material';\r\nimport { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst addTaskSlice = createSlice({\r\n  name: 'addTask',\r\n  initialState: {\r\n    showModal: false,\r\n    priorityLevel: 0,\r\n    titleFieldValue: '',\r\n    descriptionFieldValue: '',\r\n    allTasks: [],\r\n    incompleteTasks: [],\r\n    activeTasks: [],\r\n    finishedTasks: []\r\n  },\r\n  reducers: {\r\n    setShowModal: (state, action) => {\r\n      state.showModal = action.payload;\r\n    },\r\n    setPriorityLevel: (state, action) => {\r\n      state.priorityLevel = action.payload;\r\n    },\r\n    setTitleFieldValue: (state, action) => {\r\n      state.titleFieldValue = action.payload;\r\n    },\r\n    setDescriptionFieldValue: (state, action) => {\r\n      state.descriptionFieldValue = action.payload;\r\n    },\r\n    setNewTask: (state, action) => {\r\n      state.incompleteTasks.push(action.payload);\r\n      state.allTasks.push(action.payload);\r\n\r\n      localStorage.setItem(incompleteTasks, state.incompleteTasks)\r\n      localStorage.setItem(activeTasks, state.activeTasks)\r\n      localStorage.setItem(finishedTasks, state.finishedTasks)\r\n    },\r\n    moveTask: (state, action) => {\r\n      let movedItem;\r\n\r\n      switch (action.payload.source.droppableId) {\r\n        case 'incomplete':\r\n          movedItem = state.incompleteTasks[action.payload.source.index];\r\n          state.incompleteTasks = state.incompleteTasks.filter((_, index) => index !== action.payload.source.index);\r\n          break;\r\n        case 'active':\r\n          movedItem = state.activeTasks[action.payload.source.index];\r\n          state.activeTasks = state.activeTasks.filter((_, index) => index !== action.payload.source.index);\r\n          break;\r\n        case 'finished':\r\n          movedItem = state.finishedTasks[action.payload.source.index];\r\n          state.finishedTasks = state.finishedTasks.filter((_, index) => index !== action.payload.source.index);\r\n          break;\r\n      }\r\n\r\n      switch (action.payload.destination.droppableId) {\r\n        case 'incomplete':\r\n          state.incompleteTasks.splice(action.payload.destination.index, 0, movedItem)\r\n          break;\r\n        case 'active':\r\n          state.activeTasks.splice(action.payload.destination.index, 0, movedItem)\r\n          break;\r\n        case 'finished':\r\n          state.finishedTasks.splice(action.payload.destination.index, 0, movedItem)\r\n          break;\r\n      }\r\n\r\n      localStorage.setItem(incompleteTasks, state.incompleteTasks)\r\n      localStorage.setItem(activeTasks, state.activeTasks)\r\n      localStorage.setItem(finishedTasks, state.finishedTasks)\r\n    },\r\n    reorderTasks: (state, action) => {\r\n      let movedItem;\r\n      switch (action.payload.source.droppableId) {\r\n        case 'incomplete':\r\n          movedItem = state.incompleteTasks[action.payload.source.index]\r\n          state.incompleteTasks.splice(action.payload.source.index, 1)\r\n          state.incompleteTasks.splice(action.payload.destination.index, 0, movedItem)\r\n          break;\r\n        case 'active':\r\n          movedItem = state.activeTasks[action.payload.source.index]\r\n          state.activeTasks.splice(action.payload.source.index, 1)\r\n          state.activeTasks.splice(action.payload.destination.index, 0, movedItem)\r\n          break;\r\n        case 'finished':\r\n          movedItem = state.finishedTasks[action.payload.source.index]\r\n          state.finishedTasks.splice(action.payload.source.index, 1)\r\n          state.finishedTasks.splice(action.payload.destination.index, 0, movedItem)\r\n          break;\r\n      }\r\n\r\n      localStorage.setItem(incompleteTasks, state.incompleteTasks)\r\n      localStorage.setItem(activeTasks, state.activeTasks)\r\n      localStorage.setItem(finishedTasks, state.finishedTasks)\r\n    },\r\n    deleteTask: (state, action) => {\r\n      switch (action.payload.list) {\r\n        case ('incompleteTasks'):\r\n          state.incompleteTasks.splice(action.payload.index, 1)\r\n          break;\r\n        case ('activeTasks'):\r\n          state.activeTasks.splice(action.payload.index, 1)\r\n          break;\r\n        case ('finishedTasks'):\r\n          state.finishedTasks.splice(action.payload.index, 1)\r\n          break;\r\n      }\r\n\r\n      localStorage.setItem(incompleteTasks, state.incompleteTasks)\r\n      localStorage.setItem(activeTasks, state.activeTasks)\r\n      localStorage.setItem(finishedTasks, state.finishedTasks)\r\n    },\r\n    pageLoad: (state, action) => {\r\n      state.incompleteTasks = action.payload.incompleteTasks;\r\n      state.activeTasks = action.payload.activeTasks;\r\n      state.finishedTasks = action.payload.finishedTasks;\r\n    }\r\n  },\r\n});\r\n\r\nexport const {\r\n  setShowModal,\r\n  setPriorityLevel,\r\n  setTitleFieldValue,\r\n  setDescriptionFieldValue,\r\n  setNewTask,\r\n  moveTask,\r\n  reorderTasks,\r\n  deleteTask,\r\n  pageLoad\r\n} = addTaskSlice.actions;\r\n\r\nexport default addTaskSlice.reducer;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}