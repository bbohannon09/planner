{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst addTaskSlice = createSlice({\n  name: 'addTask',\n  initialState: {\n    showModal: false,\n    priorityLevel: 0,\n    titleFieldValue: '',\n    descriptionFieldValue: '',\n    allTasks: [],\n    incompleteTasks: [],\n    activeTasks: [],\n    finishedTasks: []\n  },\n  reducers: {\n    setShowModal: (state, action) => {\n      state.showModal = action.payload;\n    },\n    setPriorityLevel: (state, action) => {\n      state.priorityLevel = action.payload;\n    },\n    setTitleFieldValue: (state, action) => {\n      state.titleFieldValue = action.payload;\n    },\n    setDescriptionFieldValue: (state, action) => {\n      state.descriptionFieldValue = action.payload;\n    },\n    setNewTask: (state, action) => {\n      state.incompleteTasks.push(action.payload);\n      state.allTasks.push(action.payload);\n    },\n    moveTask: (state, action) => {\n      console.log(action.payload.start);\n      console.log(action.payload.end);\n      const movedItem = action.payload.start[action.payload.source.index];\n      const updatedItems = action.payload.start.filter((_, index) => index !== action.payload.source.index);\n      switch (action.payload.end) {\n        case 'incompleteTasks':\n          state.activeTasks.push(movedItem);\n        case 'activeTasks':\n          state.activeTasks.push(movedItem);\n        case 'finishedTasks':\n          state.activeTasks.push(movedItem);\n      }\n      state.incompleteTasks = updatedItems;\n    }\n  }\n});\nexport const {\n  setShowModal,\n  setPriorityLevel,\n  setTitleFieldValue,\n  setDescriptionFieldValue,\n  setNewTask,\n  moveTask\n} = addTaskSlice.actions;\nexport default addTaskSlice.reducer;","map":{"version":3,"names":["createSlice","addTaskSlice","name","initialState","showModal","priorityLevel","titleFieldValue","descriptionFieldValue","allTasks","incompleteTasks","activeTasks","finishedTasks","reducers","setShowModal","state","action","payload","setPriorityLevel","setTitleFieldValue","setDescriptionFieldValue","setNewTask","push","moveTask","console","log","start","end","movedItem","source","index","updatedItems","filter","_","actions","reducer"],"sources":["C:/Users/braed/Documents/Personal/Planner/src/Reducers/DayReducer.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst addTaskSlice = createSlice({\r\n  name: 'addTask',\r\n  initialState: {\r\n    showModal: false,\r\n    priorityLevel: 0,\r\n    titleFieldValue: '',\r\n    descriptionFieldValue: '',\r\n    allTasks: [],\r\n    incompleteTasks: [],\r\n    activeTasks: [],\r\n    finishedTasks: []\r\n  },\r\n  reducers: {\r\n    setShowModal: (state, action) => {\r\n      state.showModal = action.payload;\r\n    },\r\n    setPriorityLevel: (state, action) => {\r\n      state.priorityLevel = action.payload;\r\n    },\r\n    setTitleFieldValue: (state, action) => {\r\n      state.titleFieldValue = action.payload;\r\n    },\r\n    setDescriptionFieldValue: (state, action) => {\r\n      state.descriptionFieldValue = action.payload;\r\n    },\r\n    setNewTask: (state, action) => {\r\n      state.incompleteTasks.push(action.payload);\r\n      state.allTasks.push(action.payload);\r\n    },\r\n    moveTask: (state, action) => {\r\n      console.log(action.payload.start)\r\n      console.log(action.payload.end)\r\n\r\n      const movedItem = action.payload.start[action.payload.source.index];\r\n      const updatedItems = action.payload.start.filter((_, index) => index !== action.payload.source.index);\r\n\r\n      switch (action.payload.end) {\r\n        case 'incompleteTasks':\r\n          state.activeTasks.push(movedItem)\r\n        case 'activeTasks':\r\n          state.activeTasks.push(movedItem)\r\n        case 'finishedTasks':\r\n          state.activeTasks.push(movedItem)\r\n      }\r\n\r\n\r\n        state.incompleteTasks = updatedItems\r\n        \r\n\r\n    }\r\n  },\r\n});\r\n\r\nexport const {\r\n  setShowModal,\r\n  setPriorityLevel,\r\n  setTitleFieldValue,\r\n  setDescriptionFieldValue,\r\n  setNewTask,\r\n  moveTask\r\n} = addTaskSlice.actions;\r\n\r\nexport default addTaskSlice.reducer;"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAE9C,MAAMC,YAAY,GAAGD,WAAW,CAAC;EAC/BE,IAAI,EAAE,SAAS;EACfC,YAAY,EAAE;IACZC,SAAS,EAAE,KAAK;IAChBC,aAAa,EAAE,CAAC;IAChBC,eAAe,EAAE,EAAE;IACnBC,qBAAqB,EAAE,EAAE;IACzBC,QAAQ,EAAE,EAAE;IACZC,eAAe,EAAE,EAAE;IACnBC,WAAW,EAAE,EAAE;IACfC,aAAa,EAAE;EACjB,CAAC;EACDC,QAAQ,EAAE;IACRC,YAAY,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC/BD,KAAK,CAACV,SAAS,GAAGW,MAAM,CAACC,OAAO;IAClC,CAAC;IACDC,gBAAgB,EAAEA,CAACH,KAAK,EAAEC,MAAM,KAAK;MACnCD,KAAK,CAACT,aAAa,GAAGU,MAAM,CAACC,OAAO;IACtC,CAAC;IACDE,kBAAkB,EAAEA,CAACJ,KAAK,EAAEC,MAAM,KAAK;MACrCD,KAAK,CAACR,eAAe,GAAGS,MAAM,CAACC,OAAO;IACxC,CAAC;IACDG,wBAAwB,EAAEA,CAACL,KAAK,EAAEC,MAAM,KAAK;MAC3CD,KAAK,CAACP,qBAAqB,GAAGQ,MAAM,CAACC,OAAO;IAC9C,CAAC;IACDI,UAAU,EAAEA,CAACN,KAAK,EAAEC,MAAM,KAAK;MAC7BD,KAAK,CAACL,eAAe,CAACY,IAAI,CAACN,MAAM,CAACC,OAAO,CAAC;MAC1CF,KAAK,CAACN,QAAQ,CAACa,IAAI,CAACN,MAAM,CAACC,OAAO,CAAC;IACrC,CAAC;IACDM,QAAQ,EAAEA,CAACR,KAAK,EAAEC,MAAM,KAAK;MAC3BQ,OAAO,CAACC,GAAG,CAACT,MAAM,CAACC,OAAO,CAACS,KAAK,CAAC;MACjCF,OAAO,CAACC,GAAG,CAACT,MAAM,CAACC,OAAO,CAACU,GAAG,CAAC;MAE/B,MAAMC,SAAS,GAAGZ,MAAM,CAACC,OAAO,CAACS,KAAK,CAACV,MAAM,CAACC,OAAO,CAACY,MAAM,CAACC,KAAK,CAAC;MACnE,MAAMC,YAAY,GAAGf,MAAM,CAACC,OAAO,CAACS,KAAK,CAACM,MAAM,CAAC,CAACC,CAAC,EAAEH,KAAK,KAAKA,KAAK,KAAKd,MAAM,CAACC,OAAO,CAACY,MAAM,CAACC,KAAK,CAAC;MAErG,QAAQd,MAAM,CAACC,OAAO,CAACU,GAAG;QACxB,KAAK,iBAAiB;UACpBZ,KAAK,CAACJ,WAAW,CAACW,IAAI,CAACM,SAAS,CAAC;QACnC,KAAK,aAAa;UAChBb,KAAK,CAACJ,WAAW,CAACW,IAAI,CAACM,SAAS,CAAC;QACnC,KAAK,eAAe;UAClBb,KAAK,CAACJ,WAAW,CAACW,IAAI,CAACM,SAAS,CAAC;MACrC;MAGEb,KAAK,CAACL,eAAe,GAAGqB,YAAY;IAGxC;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EACXjB,YAAY;EACZI,gBAAgB;EAChBC,kBAAkB;EAClBC,wBAAwB;EACxBC,UAAU;EACVE;AACF,CAAC,GAAGrB,YAAY,CAACgC,OAAO;AAExB,eAAehC,YAAY,CAACiC,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}